import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation } from 'swiper/modules';
import type { Swiper as SwiperType } from 'swiper';
import { createPortal } from 'react-dom';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';

import DemoPageLayout from "@/components/demo/DemoPageLayout";
import ProblemIntroSection from "@/components/demo/ProblemIntroSection";
import ExampleSection from "@/components/demo/ExampleSection";
import TestGuideSection from "@/components/demo/TestGuideSection";
import CodeExampleSection from "@/components/demo/CodeExampleSection";

export default function InfiniteCarouselDemoPage() {
  
  const [selectedBadCategory, setSelectedBadCategory] = useState(0);
  const [selectedGoodCategory, setSelectedGoodCategory] = useState(0);
  const [ariaLive, setAriaLive] = useState<"off" | "polite">("off");
  const [isBottomSheetOpen, setIsBottomSheetOpen] = useState(false);
  const [currentDemo, setCurrentDemo] = useState<"bad" | "good">("bad");
  const [currentActiveIndex, setCurrentActiveIndex] = useState(0);
  const badSwiperRef = useRef<SwiperType>();
  const goodSwiperRef = useRef<SwiperType>();
  const prevButtonRef = useRef<HTMLButtonElement>(null);
  const nextButtonRef = useRef<HTMLButtonElement>(null);
  const bottomSheetRef = useRef<HTMLDivElement>(null);
  const overlayRef = useRef<HTMLDivElement>(null);
  const triggerButtonRef = useRef<HTMLButtonElement>(null);

  // 15Í∞ú ÏáºÌïëÎ™∞ Ïπ¥ÌÖåÍ≥†Î¶¨ (Î¨¥Ìïú Î£®ÌîÑÎ•º ÏúÑÌï¥ Ïó¨Îü¨ ÏÑ∏Ìä∏ ÏÉùÏÑ±)
  const baseCategories = [
    "ÏãùÌíà", "ÏÉùÌïÑÌíà", "Ìå®ÏÖò", "Î∑∞Ìã∞", "Í∞ÄÏ†Ñ", "Í∞ÄÍµ¨", "Ïä§Ìè¨Ï∏†", "Î¨∏Íµ¨",
    "Î∞òÎ†§ÎèôÎ¨º", "Í±¥Í∞ï", "Ïú°ÏïÑ", "ÎèÑÏÑú", "Ï∑®ÎØ∏", "ÏûêÎèôÏ∞®", "Ïó¨Ìñâ"
  ];

  // Î¨¥Ìïú Î£®ÌîÑÎ•º ÏúÑÌï¥ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º 30Î≤à Î∞òÎ≥µ (Ï¥ù 450Í∞ú) - Swiper ÏïàÏ†ïÏ†Å ÎèôÏûëÏùÑ ÏúÑÌï¥
  const categories = Array.from({ length: 30 }, (_, setIndex) => 
    baseCategories.map((category, index) => ({
      id: setIndex * baseCategories.length + index,
      name: category,
      emoji: getEmojiForCategory(category)
    }))
  ).flat();

  function getEmojiForCategory(category: string): string {
    const emojiMap: Record<string, string> = {
      "ÏãùÌíà": "üçé", "ÏÉùÌïÑÌíà": "üß¥", "Ìå®ÏÖò": "üëó", "Î∑∞Ìã∞": "üíÑ", "Í∞ÄÏ†Ñ": "üì±",
      "Í∞ÄÍµ¨": "ü™ë", "Ïä§Ìè¨Ï∏†": "‚öΩ", "Î¨∏Íµ¨": "üìù", "Î∞òÎ†§ÎèôÎ¨º": "üêï", "Í±¥Í∞ï": "üíä",
      "Ïú°ÏïÑ": "üë∂", "ÎèÑÏÑú": "üìö", "Ï∑®ÎØ∏": "üé®", "ÏûêÎèôÏ∞®": "üöó", "Ïó¨Ìñâ": "‚úàÔ∏è"
    };
    return emojiMap[category] || "üè∑Ô∏è";
  }

  const problemList = [
    "Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÏóêÏÑú Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÅùÏùÑ Ïïå Ïàò ÏóÜÏùå",
    "ÌòÑÏû¨ ÏúÑÏπòÎÇò Ï†ÑÏ≤¥ Ìï≠Î™© ÏàòÎ•º ÌååÏïÖÌïòÍ∏∞ Ïñ¥Î†§ÏõÄ", 
    "Í∞ÄÎ†§ÏßÑ Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäºÎì§ÏóêÎèÑ Ï†ëÍ∑º Í∞ÄÎä•Ìï¥ ÌòºÎûÄ ÏïºÍ∏∞",
    "ÌÇ§Î≥¥ÎìúÎ°ú ÌÉêÏÉâÌï† Îïå Î¨¥ÌïúÌûà ÏàúÌôòÌïòÏó¨ ÌÉàÏ∂úÌïòÍ∏∞ Ïñ¥Î†§ÏõÄ"
  ];

  // Ìè¨Ïª§Ïä§ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§ (Good Î≤ÑÏ†ÑÏö©)
  const handlePrevClick = () => {
    if (!goodSwiperRef.current) return;
    
    setAriaLive("polite");
    
    // ÌòÑÏû¨ realIndexÏóêÏÑú 7Í∞ú Í∑∏Î£π Ïù¥Ï†ÑÏúºÎ°ú Ïù¥Îèô
    const currentRealIndex = goodSwiperRef.current.realIndex;
    const baseCategories = 15; // Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Ïàò
    const currentGroup = Math.floor((currentRealIndex % baseCategories) / 7);
    const prevGroup = currentGroup > 0 ? currentGroup - 1 : Math.floor((baseCategories - 1) / 7);
    const targetIndex = prevGroup * 7;
    
    goodSwiperRef.current.slideTo(targetIndex);
    
    setTimeout(() => setAriaLive("off"), 1000);
    
    // Ìè¨Ïª§Ïä§Î•º Ï≤´ Î≤àÏß∏ Î≥¥Ïù¥Îäî Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäºÏúºÎ°ú Ïù¥Îèô
    setTimeout(() => {
      const activeSlide = bottomSheetRef.current?.querySelector('.swiper-slide-active');
      const firstVisibleButton = activeSlide?.querySelector('button') as HTMLElement;
      firstVisibleButton?.focus();
    }, 300);
  };

  const handleNextClick = () => {
    if (!goodSwiperRef.current) return;
    
    setAriaLive("polite");
    
    // ÌòÑÏû¨ realIndexÏóêÏÑú 7Í∞ú Í∑∏Î£π Îã§ÏùåÏúºÎ°ú Ïù¥Îèô
    const currentRealIndex = goodSwiperRef.current.realIndex;
    const baseCategories = 15; // Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Ïàò
    const currentGroup = Math.floor((currentRealIndex % baseCategories) / 7);
    const totalGroups = Math.ceil(baseCategories / 7);
    const nextGroup = currentGroup < totalGroups - 1 ? currentGroup + 1 : 0;
    const targetIndex = nextGroup * 7;
    
    goodSwiperRef.current.slideTo(targetIndex);
    
    setTimeout(() => setAriaLive("off"), 1000);
    
    // Ìè¨Ïª§Ïä§Î•º Ï≤´ Î≤àÏß∏ Î≥¥Ïù¥Îäî Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäºÏúºÎ°ú Ïù¥Îèô
    setTimeout(() => {
      const activeSlide = bottomSheetRef.current?.querySelector('.swiper-slide-active');
      const firstVisibleButton = activeSlide?.querySelector('button') as HTMLElement;
      firstVisibleButton?.focus();
    }, 300);
  };

  const openBottomSheet = (demo: "bad" | "good") => {
    setCurrentDemo(demo);
    setCurrentActiveIndex(0); // ÌôúÏÑ± Ïù∏Îç±Ïä§ Ï¥àÍ∏∞Ìôî
    setSelectedBadCategory(0);
    setSelectedGoodCategory(0);
    setIsBottomSheetOpen(true);
  };

  const closeBottomSheet = () => {
    setIsBottomSheetOpen(false);
    // Ìè¨Ïª§Ïä§Î•º Ìä∏Î¶¨Í±∞ Î≤ÑÌäºÏúºÎ°ú Î≥µÏõê
    setTimeout(() => {
      triggerButtonRef.current?.focus();
    }, 100);
  };

  // Î∞îÌÖÄ ÏãúÌä∏ Ï†ëÍ∑ºÏÑ± Ï≤òÎ¶¨
  useEffect(() => {
    if (isBottomSheetOpen) {
      // Î∞îÌÖÄ ÏãúÌä∏ Ïô∏Î∂Ä ÏΩòÌÖêÏ∏†Î•º inertÎ°ú ÏÑ§Ï†ï
      Array.from(document.body.children).forEach(child => {
        if (child !== bottomSheetRef.current?.closest('.portal-root')) {
          child.setAttribute('inert', '');
        }
      });

      // Ï≤´ Î≤àÏß∏ Ìè¨Ïª§Ïä§ Í∞ÄÎä•Ìïú ÏöîÏÜåÏóê Ìè¨Ïª§Ïä§
      setTimeout(() => {
        const firstFocusable = bottomSheetRef.current?.querySelector('button') as HTMLElement;
        firstFocusable?.focus();
      }, 100);

      // ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          closeBottomSheet();
          return;
        }

        if (e.key === 'Tab') {
          const focusableElements = bottomSheetRef.current?.querySelectorAll(
            'button:not([disabled])'
          );
          if (!focusableElements || focusableElements.length === 0) return;

          const firstElement = focusableElements[0] as HTMLElement;
          const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      };

      document.addEventListener('keydown', handleKeyDown);

      return () => {
        document.removeEventListener('keydown', handleKeyDown);
        // inert ÏÜçÏÑ± Ï†úÍ±∞
        Array.from(document.body.children).forEach(child => {
          child.removeAttribute('inert');
        });
      };
    }
  }, [isBottomSheetOpen]);

  const CategoryButton = ({ category, isActive, isInert = false }: { 
    category: typeof categories[0], 
    isActive: boolean, 
    isInert?: boolean 
  }) => {
    const buttonProps = isInert 
      ? { inert: "" as any } 
      : {};
    
    return (
      <button 
        className={`min-w-0 flex-shrink-0 px-4 py-3 rounded-lg border-2 transition-all ${
          isActive 
            ? 'border-primary bg-primary text-primary-foreground' 
            : 'border-border bg-background text-foreground hover:border-primary/50'
        } ${isInert ? 'opacity-50' : ''}`}
        {...buttonProps}
        aria-label={`${category.name} Ïπ¥ÌÖåÍ≥†Î¶¨`}
      >
        <div className="flex flex-col items-center space-y-1">
          <span className="text-lg">{category.emoji}</span>
          <span className="text-xs font-medium">{category.name}</span>
        </div>
      </button>
    );
  };

  const BottomSheet = () => {
    if (!isBottomSheetOpen) return null;

    const accessible = currentDemo === "good";
    const currentCategories = categories;
    const selectedIndex = accessible ? selectedGoodCategory : selectedBadCategory;
    const swiperRef = accessible ? goodSwiperRef : badSwiperRef;

    return createPortal(
      <div className="portal-root">
        <div 
          ref={overlayRef}
          className="fixed inset-0 bg-black/50 z-50" 
          onClick={(e) => {
            if (e.target === overlayRef.current) {
              closeBottomSheet();
            }
          }}
        >
          <div 
            ref={bottomSheetRef}
            className="fixed bottom-0 left-0 right-0 bg-background rounded-t-xl shadow-lg max-h-[50vh] overflow-hidden"
            role="dialog"
            aria-modal="true"
            aria-labelledby="category-title"
          >
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 id="category-title" className="text-lg font-semibold">
                  Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù ({accessible ? 'Ï†ëÍ∑ºÏÑ± Ï†ÅÏö©' : 'Ï†ëÍ∑ºÏÑ± ÎØ∏Ï†ÅÏö©'})
                </h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={closeBottomSheet}
                  aria-label="Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù Îã´Í∏∞"
                >
                  ‚úï
                </Button>
              </div>
              
              <div className="relative">
                <Swiper
                  key={`${accessible ? 'good' : 'bad'}-${isBottomSheetOpen}`}
                  onBeforeInit={(swiper) => {
                    if (accessible) {
                      goodSwiperRef.current = swiper;
                    } else {
                      badSwiperRef.current = swiper;
                    }
                  }}
                  onInit={(swiper) => {
                    // Ï¥àÍ∏∞Ìôî ÌõÑ Ï≤´ Î≤àÏß∏ Ïä¨ÎùºÏù¥ÎìúÎ°ú Ïù¥Îèô
                    swiper.slideTo(0, 0);
                  }}
                  modules={accessible ? [Navigation] : []}
                  spaceBetween={8}
                  slidesPerView={7}
                  slidesPerGroup={1}
                  centeredSlides={false}
                  loop={true}
                  loopAdditionalSlides={30} // Ï∂îÍ∞Ä Ïä¨ÎùºÏù¥Îìú Ïàò ÏÑ§Ï†ï
                  onSlideChange={(swiper) => {
                    if (accessible) {
                      setSelectedGoodCategory(swiper.realIndex);
                    } else {
                      setSelectedBadCategory(swiper.realIndex);
                    }
                  }}
                  a11y={false}
                  className="category-swiper"
                  aria-live={accessible ? ariaLive : "off"}
                  aria-label={accessible ? "Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù" : undefined}
                >
                  {currentCategories.map((category, index) => (
                    <SwiperSlide key={category.id}>
                      <CategoryButton 
                        category={category} 
                        isActive={index === selectedIndex} 
                        isInert={accessible && (Math.floor((index % 15) / 7) !== Math.floor((selectedIndex % 15) / 7))}
                      />
                    </SwiperSlide>
                  ))}
                </Swiper>
                
                {/* Ï†ëÍ∑ºÏÑ± Ï†ÅÏö© Î≤ÑÏ†ÑÏóêÎßå ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº ÌëúÏãú */}
                {accessible && (
                  <>
                    <button
                      ref={prevButtonRef}
                      onClick={handlePrevClick}
                      className="absolute left-1 top-1/2 -translate-y-1/2 z-10 bg-background/80 hover:bg-background border border-border text-foreground p-2 rounded-full transition-all duration-200"
                      aria-label="Ïù¥Ï†Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π"
                    >
                      <ChevronLeft className="w-4 h-4" />
                    </button>
                    <button
                      ref={nextButtonRef}
                      onClick={handleNextClick}
                      className="absolute right-1 top-1/2 -translate-y-1/2 z-10 bg-background/80 hover:bg-background border border-border text-foreground p-2 rounded-full transition-all duration-200"
                      aria-label="Îã§Ïùå Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π"
                    >
                      <ChevronRight className="w-4 h-4" />
                    </button>
                  </>
                )}
              </div>
              
              <div className="mt-4 text-center text-sm text-muted-foreground">
                {accessible ? (
                  <div>
                    <span aria-live="polite">
                      ÌòÑÏû¨ {selectedIndex + 1}Î≤àÏß∏ Ïπ¥ÌÖåÍ≥†Î¶¨: {currentCategories[selectedIndex]?.name}
                    </span>
                    <div className="mt-1 text-xs">
                      Í∑∏Î£π {Math.floor((selectedIndex % 15) / 7) + 1} / {Math.ceil(15 / 7)}
                    </div>
                  </div>
                ) : (
                  <span>
                    ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨: {currentCategories[selectedIndex]?.name}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>,
      document.body
    );
  };

  return (
    <DemoPageLayout 
      title="Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄ Ï†ëÍ∑ºÏÑ±"
      description="Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÏùÄ ÎßéÏùÄ Ìï≠Î™©ÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú Î≥¥Ïó¨Ï£ºÏßÄÎßå, Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî ÌòÑÏû¨ ÏúÑÏπò ÌååÏïÖÍ≥º ÌÉêÏÉâ Ï¢ÖÎ£å ÏãúÏ†êÏùÑ ÏïåÍ∏∞ Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§."
    >
      <ProblemIntroSection 
        description="ÏáºÌïëÎ™∞Ïùò Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÍ≥º Í∞ôÏùÄ Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÏùÄ ÎßéÏùÄ Ìï≠Î™©ÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú ÌÉêÏÉâÌï† Ïàò ÏûàÍ≤å Ìï¥Ï£ºÏßÄÎßå, Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌååÏïÖÌïòÍ∏∞ Ïñ¥Î†µÍ≥† Ïñ∏Ï†ú ÌÉêÏÉâÏùÑ Î©àÏ∂∞Ïïº Ìï†ÏßÄ ÏïåÍ∏∞ Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§."
        problemList={problemList}
      />

      <ExampleSection 
        type="bad" 
        problemText="ÏùºÎ∞òÏ†ÅÏù∏ Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÎ°ú ÏãúÍ∞ÅÏ†ÅÏúºÎ°úÎäî ÏßÅÍ¥ÄÏ†ÅÏù¥ÏßÄÎßå, Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏÇ¨Ïö©ÏûêÎäî ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌååÏïÖÌïòÍ∏∞ Ïñ¥Î†µÍ≥† Ïñ∏Ï†ú ÌÉêÏÉâÏùÑ ÎÅùÎÇ¥Ïïº Ìï†ÏßÄ Ïïå Ïàò ÏóÜÏäµÎãàÎã§. ÎòêÌïú Í∞ÄÎ†§ÏßÑ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ÏóêÎèÑ Ï†ëÍ∑ºÌï† Ïàò ÏûàÏñ¥ ÌòºÎûÄÏùÑ ÏïºÍ∏∞Ìï©ÎãàÎã§."
      >
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="text-lg font-semibold mb-4">ÏáºÌïë Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù</h4>
          <div className="text-center">
            <Button 
              ref={triggerButtonRef}
              onClick={() => openBottomSheet("bad")}
              className="w-full"
            >
              Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÌïòÍ∏∞ (Ï†ëÍ∑ºÏÑ± ÎØ∏Ï†ÅÏö©)
            </Button>
          </div>
        </div>
      </ExampleSection>

      <ExampleSection 
        type="good" 
        solutionText="Î¨¥Ìïú Î£®ÌîÑÎäî Ïú†ÏßÄÌïòÎêò, ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥ Ï†úÍ≥µ, aria-liveÎ°ú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏïàÎÇ¥, ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº Ï∂îÍ∞Ä, Í∑∏Î¶¨Í≥† inertÎ°ú Í∞ÄÎ†§ÏßÑ ÏòÅÏó≠ Ï†ëÍ∑º Ï∞®Îã®ÏùÑ ÌÜµÌï¥ Ï†ëÍ∑ºÏÑ±ÏùÑ Í∞úÏÑ†Ìï©ÎãàÎã§."
      >
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="text-lg font-semibold mb-4">ÏáºÌïë Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù</h4>
          <div className="text-center">
            <Button 
              onClick={() => openBottomSheet("good")}
              className="w-full"
            >
              Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÌïòÍ∏∞ (Ï†ëÍ∑ºÏÑ± Ï†ÅÏö©)
            </Button>
          </div>
        </div>
      </ExampleSection>

      <TestGuideSection
        testTitle="Ïä§ÌÅ¨Î¶∞ Î¶¨ÎçîÎ°ú ÌÖåÏä§Ìä∏ÌïòÍ∏∞"
        badSteps={[
          { step: "1", description: "Î≥¥Ïù¥Ïä§Ïò§Î≤Ñ(iOS) ÎòêÎäî ÌÜ°Î∞±(Android)ÏùÑ ÏºúÍ≥† Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù Î≤ÑÌäºÏùÑ ÎàåÎü¨Î≥¥ÏÑ∏Ïöî" },
          { step: "2", description: "Ìïú ÏÜêÍ∞ÄÎùΩ Ïä§ÏôÄÏù¥ÌîÑÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ÏùÑ ÌÉêÏÉâÌï¥Î≥¥ÏÑ∏Ïöî" },
          { step: "3", description: "ÌòÑÏû¨ Î™á Î≤àÏß∏ Ïπ¥ÌÖåÍ≥†Î¶¨Ïù∏ÏßÄ, Ï†ÑÏ≤¥Í∞Ä Î™á Í∞úÏù∏ÏßÄ ÌååÏïÖÌï¥Î≥¥ÏÑ∏Ïöî" },
          { step: "4", description: "Í∞ÄÎ†§ÏßÑ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ÏóêÎèÑ Ï†ëÍ∑ºÎêòÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî" }
        ]}
        goodSteps={[
          { step: "1", description: "Î≥¥Ïù¥Ïä§Ïò§Î≤Ñ(iOS) ÎòêÎäî ÌÜ°Î∞±(Android)ÏùÑ ÏºúÍ≥† Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù Î≤ÑÌäºÏùÑ ÎàåÎü¨Î≥¥ÏÑ∏Ïöî" },
          { step: "2", description: "ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäºÏúºÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£πÏùÑ Î≥ÄÍ≤ΩÌï¥Î≥¥ÏÑ∏Ïöî" },
          { step: "3", description: "ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏùåÏÑ±ÏúºÎ°ú ÏïàÎÇ¥ÎêòÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî" },
          { step: "4", description: "Î≥¥Ïù¥ÏßÄ ÏïäÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÎäî Ï†ëÍ∑ºÎêòÏßÄ ÏïäÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî" }
        ]}
        badResult="Î¨¥Ìïú Î£®ÌîÑÎ°ú Ïù∏Ìï¥ ÎÅùÏùÑ Ïïå Ïàò ÏóÜÍ≥†, Í∞ÄÎ†§ÏßÑ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ÏóêÎèÑ Ï†ëÍ∑ºÎêòÏñ¥ ÌòºÎûÄÏä§ÎüΩÏäµÎãàÎã§."
        goodResult="ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä Ï†úÍ≥µÎêòÍ≥†, ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäºÏúºÎ°ú Î™ÖÌôïÌïú Ï†úÏñ¥Í∞Ä Í∞ÄÎä•ÌïòÎ©∞, Î≥¥Ïù¥Îäî ÏòÅÏó≠ÏóêÎßå Ï†ëÍ∑ºÎê©ÎãàÎã§."
        additionalNotes={[
          "Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÏùÄ ÎßéÏùÄ Ìï≠Î™© ÌÉêÏÉâÏóê Ìö®Ïú®Ï†Å",
          "ÌïòÏßÄÎßå Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî ÌòºÎûÄÏä§Îü¨Ïö¥ Í≤ΩÌóò Ï†úÍ≥µ",
          "ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥ÏôÄ Î™ÖÌôïÌïú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏúºÎ°ú Ï†ëÍ∑ºÏÑ± Í∞úÏÑ† Í∞ÄÎä•"
        ]}
      />

      <CodeExampleSection
        badExample={{
          title: "Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄ (Ï†ëÍ∑ºÏÑ± ÎØ∏Ï†ÅÏö©)",
          code: `<Swiper
  spaceBetween={8}
  slidesPerView={7}
  loop={true}
  onSlideChange={(swiper) => setSelectedCategory(swiper.realIndex)}
>
  {categories.map((category, index) => (
    <SwiperSlide key={category.id}>
      <CategoryButton 
        category={category} 
        isActive={index === selectedIndex} 
      />
    </SwiperSlide>
  ))}
</Swiper>

{/* Î¨∏Ï†úÏ†ê */}
{/* - ÌòÑÏû¨ ÏúÑÏπòÎ•º Ïïå Ïàò ÏóÜÏùå */}
{/* - Î¨¥Ìïú Î£®ÌîÑÎ°ú Ïñ∏Ï†ú ÎÅùÎÇ†ÏßÄ Î™®Î¶Ñ */}
{/* - Í∞ÄÎ†§ÏßÑ Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÎèÑ Ï†ëÍ∑º Í∞ÄÎä• */}
{/* - ÌÇ§Î≥¥Îìú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïñ¥Î†§ÏõÄ */}`
        }}
        goodExample={{
          title: "Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄ (Ï†ëÍ∑ºÏÑ± Ï†ÅÏö©)",
          code: `<Swiper
  modules={[Navigation]}
  spaceBetween={8}
  slidesPerView={7}
  loop={true}
  onSlideChange={(swiper) => setSelectedCategory(swiper.realIndex)}
  a11y={{
    prevSlideMessage: 'Ïù¥Ï†Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π',
    nextSlideMessage: 'Îã§Ïùå Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π',
  }}
  aria-live={ariaLive}
  aria-label="Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù"
>
  {categories.map((category, index) => (
    <SwiperSlide key={category.id}>
      <CategoryButton 
        category={category} 
        isActive={index === selectedIndex}
        isInert={Math.floor(index / 7) !== Math.floor(selectedIndex / 7)}
      />
    </SwiperSlide>
  ))}
</Swiper>

{/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº */}
<button
  onClick={() => {
    setAriaLive("polite");
    swiperRef.current?.slidePrev();
    setTimeout(() => setAriaLive("off"), 1000);
    
    // Ï≤´ Î≤àÏß∏ Î≥¥Ïù¥Îäî Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú Ìè¨Ïª§Ïä§ Ïù¥Îèô
    setTimeout(() => {
      const firstVisible = container.querySelector('.swiper-slide-active button');
      firstVisible?.focus();
    }, 150);
  }}
  aria-label="Ïù¥Ï†Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π"
>
  <ChevronLeft />
</button>

<button
  onClick={handleNextClick}
  aria-label="Îã§Ïùå Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£π"
>
  <ChevronRight />
</button>

{/* ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥ */}
<div aria-live="polite">
  ÌòÑÏû¨ {selectedIndex + 1}Î≤àÏß∏ Ïπ¥ÌÖåÍ≥†Î¶¨: {categories[selectedIndex]?.name}
</div>

// Ìè¨Ïª§Ïä§ Í¥ÄÎ¶¨
const handleNextClick = () => {
  setAriaLive("polite");
  swiperRef.current?.slideNext();
  setTimeout(() => setAriaLive("off"), 1000);
  
  // Í∞±Ïã†Îêú Ï≤´ Î≤àÏß∏ ÏöîÏÜåÎ°ú Ìè¨Ïª§Ïä§ Ïù¥Îèô
  setTimeout(() => {
    const firstVisibleButton = container.querySelector('.swiper-slide-active button');
    firstVisibleButton?.focus();
  }, 150);
};`
        }}
        guidelines={[
          "Î¨¥Ìïú Î£®ÌîÑ Ï∫êÎü¨ÏÖÄÏóêÎäî ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥Î•º Î™ÖÌôïÌûà Ï†úÍ≥µ",
          "aria-liveÎ°ú Ïä¨ÎùºÏù¥Îìú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ Ïä§ÌÅ¨Î¶∞ Î¶¨ÎçîÏóê ÏïàÎÇ¥",
          "ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäºÏúºÎ°ú ÌÇ§Î≥¥Îìú Ï†ëÍ∑ºÏÑ± ÌôïÎ≥¥",
          "inert ÏÜçÏÑ±ÏúºÎ°ú Í∞ÄÎ†§ÏßÑ ÏòÅÏó≠Ïùò Ï†ëÍ∑º Ï∞®Îã®",
          "Ìè¨Ïª§Ïä§ Í¥ÄÎ¶¨Î°ú Ïä¨ÎùºÏù¥Îìú Î≥ÄÍ≤Ω ÌõÑ Ï†ÅÏ†àÌïú ÏöîÏÜåÏóê Ìè¨Ïª§Ïä§ Ïù¥Îèô"
        ]}
      />

      <BottomSheet />
    </DemoPageLayout>
  );
}