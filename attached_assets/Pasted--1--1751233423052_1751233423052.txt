[개발 요청] '알림 설정' 바텀 시트 접근성 데모 구현 지시서
1. 개요
웹 접근성의 중요성을 개발자가 명확히 이해할 수 있도록, **'알림 설정 변경'**이라는 구체적인 시나리오를 바탕으로 접근성이 적용된 바텀 시트와 적용되지 않은 바텀 시트를 비교 체험할 수 있는 데모 페이지를 개발합니다.

본 데모는 사용자가 직접 상호작용하며 접근성 구현 여부에 따른 사용자 경험(UX) 차이를 체감하는 것을 목표로 합니다.

2. 배경
현재 우리 플랫폼의 다른 부분에서는 UI 라이브러리인 Radix UI를 사용하여 바텀 시트를 구현하고 있으나, 이번 데모의 목적은 접근성 구현 원리를 직접 학습하고 비교하는 것이므로, 라이브러리에 의존하지 않고 React와 Express 환경에서 컴포넌트를 직접 개발합니다.

프로젝트 내에 이미 구현된 버튼, 아이콘 등 기본 컴포넌트가 있다면 이를 최대한 재활용하여 일관성을 유지합니다.

3. 데모 시나리오 상세
A. 메인 페이지 구성

페이지 상단에 "마이페이지"와 같은 간단한 제목을 표시합니다.

페이지 본문에는 다음과 같은 '알림 설정' 섹션을 구성합니다.

텍스트: "앱의 새로운 소식 및 이벤트 알림 설정을 변경할 수 있습니다."

현재 설정 값 표시: "현재 설정: 모든 알림 받기"

두 개의 실행 버튼을 명확히 구분하여 배치합니다.

[접근성 우수 사례로 설정 변경하기]

[접근성 미흡 사례로 설정 변경하기]

B. '알림 설정' 바텀 시트 UI 및 인터랙션 플로우

열기: 사용자가 두 버튼 중 하나를 클릭하면, 화면 하단에서 해당 버전의 '알림 설정' 바텀 시트가 부드럽게 슬라이드 되어 올라옵니다.

UI 구성: 바텀 시트 내부는 다음과 같이 구성됩니다.

제목 (Heading): <h2> 태그를 사용하여 "알림 받기" 라는 명확한 제목을 제공합니다.

옵션 (Radio Group): 사용자가 하나의 옵션만 선택할 수 있는 라디오 버튼 그룹을 제공합니다.

( ) 모든 알림 받기

( ) 중요 알림만 받기

( ) 알림 끄기

액션 버튼:

[취소] 버튼

[확인] 버튼 (Primary Action 스타일 적용)

닫기 및 결과 처리:

확인: '확인' 버튼 클릭 시, 바텀 시트가 닫히고 메인 페이지의 "현재 설정:" 텍스트가 사용자가 선택한 값으로 변경됩니다. (예: "현재 설정: 중요 알림만 받기"). 동시에 화면 하단에 "알림 설정이 변경되었습니다." 라는 토스트 메시지가 잠시 나타났다 사라집니다.

취소: '취소' 버튼을 클릭하거나, 바텀 시트 외부의 어두운 배경(Overlay)을 클릭하면 아무런 변경 없이 바텀 시트가 닫힙니다.

C. 공통 시각 디자인

바텀 시트가 열리면 기존 페이지 콘텐츠는 사라지지 않고 뒷배경으로 유지되며, 그 위에는 반투명한 어두운 오버레이(Overlay)를 추가하여 바텀 시트에 시각적 집중을 유도합니다.

4. 세부 개발 지침
가. 접근성이 적용된 우수 사례 (Good Case)
다음의 웹 접근성 지침을 반드시 준수하여 개발합니다.

시맨틱 마크업 및 WAI-ARIA:

바텀 시트 컨테이너에 role="dialog", aria-modal="true" 속성을 부여합니다.

바텀 시트 제목(h2)에 id="bottom-sheet-title"를 부여하고, 컨테이너에 aria-labelledby="bottom-sheet-title"를 연결하여 스크린 리더가 진입 시 제목을 먼저 읽게 합니다.

초점 관리 (Focus Management):

열기: 바텀 시트가 열리면, 키보드 초점은 즉시 바텀 시트 내부의 첫 번째 포커스 가능한 요소(예: '취소' 버튼)로 강제 이동합니다.

닫기: 바텀 시트가 닫히면, 키보드 초점은 바텀 시트를 열었던 원래의 트리거 버튼으로 정확히 복귀합니다.

배경 콘텐츠 비활성화 (inert):

바텀 시트가 활성화된 동안 스크린 리더 및 키보드 사용자가 배경 콘텐츠와 상호작용할 수 없도록, React Portal로 생성된 바텀 시트 컨테이너를 제외한 <body>의 다른 모든 형제 요소에 inert 속성을 동적으로 적용합니다.

키보드 상호작용:

초점 가두기 (Focus Trap): Tab 키와 Shift + Tab 키를 눌렀을 때, 초점이 바텀 시트 내부에서만 순환하도록 구현합니다.

Esc 키: Esc 키를 누르면 '취소'와 동일하게 바텀 시트가 닫히도록 구현합니다.

나. 접근성이 적용되지 않은 미흡 사례 (Bad Case)
위의 접근성 기능들을 의도적으로 모두 누락하여 개발합니다.

마크업: div와 span 등 비시맨틱 태그만 사용하여 구조를 만들고, ARIA 속성을 전혀 사용하지 않습니다.

초점 관리 부재:

바텀 시트가 열려도 키보드 초점은 그대로 페이지에 남아있습니다.

바텀 시트가 닫힌 후에도 초점은 페이지의 맨 처음으로 이동합니다.

배경 콘텐츠 활성화:

inert 속성을 사용하지 않아, 바텀 시트가 열려 있는 상태에서도 Tab 키로 배경의 다른 요소들을 탐색할 수 있습니다.

키보드 상호작용 부재: Esc 키로 닫히지 않으며, 초점이 바텀 시트 밖으로 자유롭게 넘나듭니다.

5. 구현 가이드
React Portal 활용: 바텀 시트 컴포넌트는 CSS z-index 관리 및 DOM 구조의 명료함을 위해 React Portal을 사용하여 <body>의 직계 자식으로 렌더링하는 것을 권장합니다.

inert 속성 제어 로직 (React useEffect 예시):

useEffect(() => {
    if (!isOpen) return;

    const portalRoot = document.getElementById('bottom-sheet-portal-root');
    const originalActiveElement = document.activeElement;

    // Portal을 제외한 body의 다른 직계 자식 요소를 찾아 inert=true 설정
    Array.from(document.body.children).forEach(child => {
        if (child !== portalRoot) {
            child.setAttribute('inert', 'true');
        }
    });

    // 포커스 이동 로직 (예: 바텀시트 내 첫번째 버튼으로)
    const firstFocusableEl = portalRoot.querySelector('button');
    firstFocusableEl?.focus();

    return () => {
        // 컴포넌트가 닫힐 때 inert 속성 제거
        Array.from(document.body.children).forEach(child => {
            child.removeAttribute('inert');
        });

        // 포커스 복귀 로직
        originalActiveElement?.focus();
    };
}, [isOpen]);

6. 완료 조건
'알림 설정' 시나리오 기반의 '접근성 우수 사례'와 '접근성 미흡 사례' 두 가지 버전의 바텀 시트 데모가 모두 구현되어야 합니다.

각 사례는 위에 명시된 모든 요구사항 및 지침을 정확하게 충족해야 합니다.

코드는 다른 개발자가 쉽게 이해하고 리뷰할 수 있도록 명료하게 작성되어야 합니다.